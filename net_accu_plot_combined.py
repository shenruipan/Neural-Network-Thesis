import matplotlib
import matplotlib.pylab as plt
import numpy as np
from math import *

text_file = open("C:/Users/Veblen/mystuff/net_data_1000/test_accuracy.txt", "r")
PanNet_1 = np.asarray(text_file.readlines())
text_file = open("C:/Users/Veblen/mystuff/net_data_1000/LeNet1_test_accuracy.txt", "r")
LeNet1_1 = np.asarray(text_file.readlines())
text_file = open("C:/Users/Veblen/mystuff/net_data_1000/backPanNettest_accuracy.txt", "r")
backPanNet_1 = np.asarray(text_file.readlines())
text_file = open("C:/Users/Veblen/mystuff/net_data/test_accuracy.txt", "r")
PanNet_2 = np.asarray(text_file.readlines())
text_file = open("C:/Users/Veblen/mystuff/net_data/LeNet1_test_accuracy.txt", "r")
LeNet1_2 = np.asarray(text_file.readlines())
text_file = open("C:/Users/Veblen/mystuff/net_data/backPanNettest_accuracy.txt", "r")
backPanNet_2 = np.asarray(text_file.readlines())

PanNet = np.concatenate((PanNet_1, PanNet_2), axis = 0)
LeNet1 = np.concatenate((LeNet1_1, LeNet1_2), axis = 0)
backPanNet = np.concatenate((backPanNet_1, backPanNet_2), axis = 0)

num_training1=[(k+1)*10*100 for k in range(int(1000/10))]
num_training2=[(k+1)*1000*100 for k in range(int(50000/1000))]
num_training =num_training1+num_training2

plt.figure(1)
plt.axis((-1000*100,50000*100,0.29,1.00))
plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
PanNet_plot,=plt.plot(num_training, PanNet, label='PanNet')
LeNet1_plot,=plt.plot(num_training, LeNet1, label='LeNet-1')
backPanNet_plot,=plt.plot(num_training, backPanNet, label='BackPanNet')
plt.xlabel('Number of training images')
plt.ylabel('Accuracy')
plt.title('Accuracy Comparison')
plt.legend(handles=[PanNet_plot, LeNet1_plot, backPanNet_plot])
plt.savefig('net_accu_plot_combined.png', bbox_inches='tight')

plt.figure(2)
#plt.axis((0,1000,0.00,1.00))
plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
PanNet_plot_1,=plt.plot(num_training1, PanNet_1, label='PanNet')
LeNet1_plot_1,=plt.plot(num_training1, LeNet1_1, label='LeNet-1')
backPanNet_plot_1,=plt.plot(num_training1, backPanNet_1, label='BackPanNet')
plt.xlabel('Number of training images')
plt.ylabel('Accuracy')
plt.title('Accuracy Comparison')
plt.legend(handles=[PanNet_plot_1, LeNet1_plot_1, backPanNet_plot_1])
plt.savefig('net_accu_plot_combined_1.png', bbox_inches='tight')

plt.figure(3)
plt.axis((0,50000*100,0.86,1.00))
plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
PanNet_plot_2,=plt.plot(num_training2, PanNet_2, label='PanNet')
LeNet1_plot_2,=plt.plot(num_training2, LeNet1_2, label='LeNet-1')
backPanNet_plot_2,=plt.plot(num_training2, backPanNet_2, label='BackPanNet')
plt.xlabel('Number of training images')
plt.ylabel('Accuracy')
plt.title('Accuracy Comparison')
plt.legend(handles=[PanNet_plot_2, LeNet1_plot_2, backPanNet_plot_2])
plt.savefig('net_accu_plot_combined_2.png', bbox_inches='tight')

plt.figure(4)
fig1, ax1 = plt.subplots()
PanNet_plot_3,=plt.plot(np.asarray(num_training), np.asarray([(float(i)) for i in PanNet]), label='PanNet')
LeNet1_plot_3,=plt.plot(np.asarray(num_training), np.asarray([(float(i)) for i in LeNet1]), label='LeNet-1')
backPanNet_plot_3,=plt.plot(np.asarray(num_training), np.asarray([(float(i)) for i in backPanNet]), label='BackPanNet')
ax1.set_xscale('log')
ax1.set_xticks([1e3, 1e5, 1e6, 5e6])
ax1.get_xaxis().set_major_formatter(matplotlib.ticker.LogFormatterSciNotation())
plt.xlabel('Number of training images')
plt.ylabel('Accuracy')
plt.title('Accuracy Comparison')
plt.legend(handles=[PanNet_plot_3, LeNet1_plot_3, backPanNet_plot_3])
plt.savefig('net_accu_plot_combined_3.png', bbox_inches='tight')